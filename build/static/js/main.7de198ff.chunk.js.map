{"version":3,"sources":["Layout/Header.js","utils/api/index.js","Layout/index.js","Layout/NotFound.js","Layout/Study.js","Layout/DeckOverview.js","Layout/NewDeck.js","Layout/EditDeck.js","Layout/AddCard.js","Layout/EditCard.js","App.js","index.js"],"names":["Header","className","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","cardId","updatedCard","append","Layout","useState","decks","setDecks","useEffect","listDecks","then","value","to","type","map","length","description","onClick","NotFound","Study","useParams","setDeck","setCards","nextDisplay","side","setSide","cardNum","setCardNum","history","useHistory","aria-label","href","aria-current","window","confirm","push","style","display","DeckOverview","handleDeleteCard","deleteCard","NewDeck","initialFormState","formData","setFormData","handleChange","target","onSubmit","event","preventDefault","createDeck","htmlFor","placeholder","onChange","EditDeck","go","updateDeck","AddCard","front","back","createCard","EditCard","readCard","updateCard","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7de198ff.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport { Link } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api/index\";\n\nfunction Layout() {\n  const handleDelete = (id) => {\n    deleteDeck(id);\n  };\n  const [decks, setDecks] = useState([]);\n  useEffect(() => {\n    listDecks().then((value) => {\n      setDecks(value);\n    });\n  }, [decks]);\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n        <Link\n          to=\"/decks/new\"\n          type=\"button\"\n          className=\"btn btn-secondary btn-lg\"\n        >\n          Create Deck +\n        </Link>\n        {decks.map((deck) => {\n          return (\n            <div key={deck[\"cards\"][\"id\"]} className=\"card mt-2\">\n              <div className=\"card-body\">\n                <h6 className=\"float-right mb-0 d-inline-block\">\n                  {deck[\"cards\"].length} cards\n                </h6>\n                <h3>{deck.name}</h3>\n                <p>{deck.description}</p>\n                <div className=\"d-flex\">\n                  <div className=\"p-2\">\n                    <Link\n                      to={`/decks/${deck.id}`}\n                      type=\"button\"\n                      className=\"btn btn-secondary btn-md justify-content-start\"\n                    >\n                      View\n                    </Link>\n                  </div>\n                  <div className=\"p-2\">\n                    <Link\n                      to={`/decks/${deck.id}/study`}\n                      type=\"button\"\n                      className=\"btn btn-primary btn-md justify-content-start\"\n                    >\n                      Study\n                    </Link>\n                  </div>\n                  <div className=\"ml-auto p-2\">\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-danger btn-md justify-content-end\"\n                      onClick={() => handleDelete(deck.id)}\n                    >\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React, { useState, useEffect } from \"react\";\nimport { useParams, Link, useHistory } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api/index\";\n\nfunction Study() {\n  const { deckId } = useParams();\n  const [deck, setDeck] = useState([]);\n  const [cards, setCards] = useState([]);\n  useEffect(() => {\n    readDeck(deckId).then((value) => {\n      setDeck(value);\n      setCards(value[\"cards\"]);\n    });\n  }, []);\n  const [side, setSide] = useState(\"front\");\n  let nextDisplay;\n  if (side === \"front\") {\n    nextDisplay = \"none\";\n  } else {\n    nextDisplay = \"inline\";\n  }\n  const handleFlip = () => {\n    if (side === \"front\") {\n      setSide(\"back\");\n    } else {\n      setSide(\"front\");\n    }\n  };\n  const [cardNum, setCardNum] = useState(0);\n  const history = useHistory();\n  const handleNext = () => {\n    if (cardNum + 1 < deck[\"cards\"].length) {\n      setCardNum(cardNum + 1);\n      setSide(\"front\");\n    } else {\n      let confirmed = window.confirm(\n        \"Restart Cards? Press Cancel To Return Home\"\n      );\n      if (confirmed === true) {\n        setCardNum(0);\n        setSide(\"front\");\n      } else {\n        history.push(\"/\");\n      }\n    }\n  };\n\n  if (cards.length > 2) {\n    return (\n      <>\n        {/* TODO: Implement the screen starting here */}\n        <div className=\"container\">\n          <nav aria-label=\"breadcrumb\">\n            <ol className=\"breadcrumb\">\n              <li className=\"breadcrumb-item\">\n                <a href=\"/\">Home</a>\n              </li>\n              <li className=\"breadcrumb-item\">\n                <a href={`/decks/${deck.id}`}>{deck[\"name\"]}</a>\n              </li>\n              <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                Study\n              </li>\n            </ol>\n          </nav>\n        </div>\n        <div className=\"container\">\n          <h1>{deck[\"name\"]}: Study</h1>\n          <div className=\"card mt-2 pt-3\">\n            <div className=\"card-body\">\n              <h4>\n                Card {cardNum + 1} of {deck[\"cards\"].length}\n              </h4>\n              <p>{deck[\"cards\"][cardNum][side]}</p>\n            </div>\n            <div className=\"m-3\">\n              <button\n                to=\"/decks/:deckId\"\n                type=\"button\"\n                className=\"btn btn-secondary btn-md justify-content-start\"\n                onClick={handleFlip}\n              >\n                Flip\n              </button>\n              {nextDisplay === \"inline\" && (\n                <button\n                  to=\"/decks/:deckId\"\n                  type=\"button\"\n                  className=\"btn btn-secondary btn-md m-2\"\n                  onClick={handleNext}\n                  style={{ display: nextDisplay }}\n                >\n                  Next\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  } else {\n    return (\n      <div className=\"container\">\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"/\">Home</a>\n            </li>\n            <li className=\"breadcrumb-item\">\n              <a href={`/decks/${deck.id}`}>{deck[\"name\"]}</a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Study\n            </li>\n          </ol>\n        </nav>\n        <div>\n          <h1>{deck[\"name\"]}: Study</h1>\n          <h3>Not Enough Cards.</h3>\n          <p>\n            You need at least 3 cards to study. There are {cards.length} in this\n            deck.\n          </p>\n          <Link\n            to={`/decks/${deck.id}/cards/new`}\n            type=\"button\"\n            className=\"btn btn-primary btn-md justify-content-start\"\n          >\n            Add Cards\n          </Link>\n          <div />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Study;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { readDeck, deleteCard, deleteDeck } from \"../utils/api/index\";\n\nfunction DeckOverview() {\n  const { deckId } = useParams();\n  const [deck, setDeck] = useState([]);\n  const [cards, setCards] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    readDeck(deckId).then((value) => {\n      setDeck(value);\n      setCards(value[\"cards\"]);\n    });\n  }, [deck]);\n  const handleDeleteDeck = (id) => {\n    deleteDeck(id);\n    history.push(\"/\");\n  };\n  const handleDeleteCard = (id) => {\n    deleteCard(id);\n  };\n  return (\n    <>\n      <div className=\"container\">\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"/\">Home</a>\n            </li>\n            <li className=\"breadcrumb-item active\">{deck[\"name\"]}</li>\n          </ol>\n        </nav>\n      </div>\n      <div className=\"container\">\n        <h6 className=\"float-right mb-0 d-inline-block\">\n          {cards.length} Cards\n        </h6>\n        <h3>{deck.name}</h3>\n        <p>{deck.description}</p>\n        <div className=\"d-flex\">\n          <div className=\"p-2\">\n            <Link\n              to={`/decks/${deck.id}/edit`}\n              type=\"button\"\n              className=\"btn btn-secondary btn-md justify-content-start\"\n            >\n              Edit\n            </Link>\n          </div>\n          <div className=\"p-2\">\n            <Link\n              to={`/decks/${deck.id}/study`}\n              type=\"button\"\n              className=\"btn btn-primary btn-md justify-content-start\"\n            >\n              Study\n            </Link>\n          </div>\n          <div className=\"p-2\">\n            <Link\n              to={`/decks/${deck.id}/cards/new`}\n              type=\"button\"\n              className=\"btn btn-primary btn-md justify-content-start\"\n            >\n              Add Cards\n            </Link>\n          </div>\n          <div className=\"ml-auto p-2\">\n            <button\n              type=\"button\"\n              className=\"btn btn-danger btn-md justify-content-end\"\n              onClick={() => handleDeleteDeck(deck.id)}\n            >\n              Delete\n            </button>\n          </div>\n        </div>\n        <div className=\"mt-5\">\n          <h2>Cards:</h2>\n        </div>\n        {cards.map((card) => {\n          return (\n            <div className=\"card mt-2 pt-3\">\n              <div className=\"card-body\">\n                <h5>Front: </h5>\n                <p>{card[\"front\"]}</p>\n                <h5>Back:</h5>\n                <p>{card[\"back\"]}</p>\n              </div>\n              <div className=\"m-3\">\n                <Link\n                  to={`/decks/${deck.id}/cards/${card.id}/edit`}\n                  type=\"button\"\n                  className=\"btn btn-secondary mr-2 btn-md justify-content-start\"\n                >\n                  Edit\n                </Link>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-danger btn-md justify-content-end\"\n                  onClick={() => handleDeleteCard(card.id)}\n                >\n                  Delete\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nexport default DeckOverview;\n","import React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { createDeck } from \"../utils/api/index\";\nimport Header from \"./Header\";\n\nfunction NewDeck() {\n  const initialFormState = {\n    name: \"\",\n    description: \"\",\n  };\n  const [formData, setFormData] = useState({ ...initialFormState });\n  const handleChange = ({ target }) => {\n    setFormData({\n      ...formData,\n      [target.name]: target.value,\n    });\n  };\n  const history = useHistory();\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    history.push(\"/\");\n    createDeck(formData);\n\n    setFormData({ ...initialFormState });\n  };\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"/\">Home</a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Create Deck\n            </li>\n          </ol>\n        </nav>\n        <h1>Create Deck</h1>\n      </div>\n      <div className=\"container\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">\n              Name:\n              <input\n                className=\"form-control d-inline\"\n                id=\"name\"\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Deck Name\"\n                onChange={handleChange}\n                value={formData.name}\n              />\n            </label>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">\n              Description:\n              <textarea\n                className=\"form-control d-inline\"\n                id=\"description\"\n                type=\"text\"\n                name=\"description\"\n                placeholder=\"Brief description of the deck\"\n                onChange={handleChange}\n                value={formData.description}\n              />\n            </label>\n          </div>\n          <br />\n          <Link type=\"button\" className=\"btn btn-secondary btn-md mr-2\" to=\"/\">\n            Cancel\n          </Link>\n          <button className=\"btn btn-primary btn-md\" type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </>\n  );\n}\n\nexport default NewDeck;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { updateDeck, readDeck } from \"../utils/api/index\";\nimport Header from \"./Header\";\n\nfunction EditDeck() {\n  const { deckId } = useParams();\n  useEffect(() => {\n    readDeck(deckId).then((value) => {\n      setFormData(value);\n    });\n  }, []);\n  const initialFormState = {\n    name: \"\",\n    description: \"\",\n  };\n  const [formData, setFormData] = useState({ ...initialFormState });\n  const handleChange = ({ target }) => {\n    setFormData({\n      ...formData,\n      [target.name]: target.value,\n    });\n  };\n  const history = useHistory();\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    history.go(-1);\n    updateDeck(formData);\n\n    setFormData({ ...initialFormState });\n  };\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"/\">Home</a>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Edit Deck\n            </li>\n          </ol>\n        </nav>\n        <h1>Edit Deck</h1>\n      </div>\n      <div className=\"container\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">\n              Name:\n              <input\n                className=\"form-control d-inline\"\n                id=\"name\"\n                type=\"text\"\n                name=\"name\"\n                onChange={handleChange}\n                value={formData.name}\n              />\n            </label>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">\n              Description:\n              <textarea\n                className=\"form-control d-inline\"\n                id=\"description\"\n                type=\"text\"\n                name=\"description\"\n                onChange={handleChange}\n                value={formData.description}\n              />\n            </label>\n          </div>\n          <br />\n          <Link\n            type=\"button\"\n            className=\"btn btn-secondary btn-md mr-2\"\n            to={`/decks/${deckId}`}\n          >\n            Cancel\n          </Link>\n          <button className=\"btn btn-primary btn-md\" type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </>\n  );\n}\n\nexport default EditDeck;\n","import React, { useState, useEffect } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { createCard, readDeck } from \"../utils/api/index\";\nimport Header from \"./Header\";\n\nfunction AddCard() {\n  const { deckId } = useParams();\n  const [deck, setDeck] = useState([]);\n  useEffect(() => {\n    readDeck(deckId).then((value) => {\n      setDeck(value);\n    });\n  }, []);\n  const initialFormState = {\n    front: \"\",\n    back: \"\",\n  };\n  const [formData, setFormData] = useState({ ...initialFormState });\n  const handleChange = ({ target }) => {\n    setFormData({\n      ...formData,\n      [target.name]: target.value,\n    });\n  };\n  const history = useHistory();\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    createCard(deckId, formData);\n    history.go(-1);\n    setFormData({ ...initialFormState });\n  };\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"/\">Home</a>\n            </li>\n            <li className=\"breadcrumb-item active\">{deck[\"name\"]}</li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Add Card\n            </li>\n          </ol>\n        </nav>\n        <h1>Create Card for {deck[\"name\"]}</h1>\n      </div>\n      <div className=\"container\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"front\">\n              Front:\n              <textarea\n                className=\"form-control d-inline\"\n                id=\"front\"\n                type=\"text\"\n                name=\"front\"\n                placeholder=\"Front side of card\"\n                onChange={handleChange}\n                value={formData.front}\n              />\n            </label>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"back\">\n              Back:\n              <textarea\n                className=\"form-control d-inline\"\n                id=\"back\"\n                type=\"text\"\n                name=\"back\"\n                placeholder=\"Back side of card\"\n                onChange={handleChange}\n                value={formData.back}\n              />\n            </label>\n          </div>\n          <br />\n          <Link\n            type=\"button\"\n            className=\"btn btn-secondary btn-md mr-2\"\n            to={`/decks/${deckId}`}\n          >\n            Done\n          </Link>\n          <button className=\"btn btn-primary btn-md\" type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </>\n  );\n}\n\nexport default AddCard;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { readCard, readDeck, updateCard } from \"../utils/api/index\";\nimport Header from \"./Header\";\n\nfunction EditCard() {\n  const { deckId, cardId } = useParams();\n  const [deck, setDeck] = useState([]);\n  const initialFormState = {\n    front: \"\",\n    back: \"\",\n  };\n  const [formData, setFormData] = useState({ ...initialFormState });\n  useEffect(() => {\n    readDeck(deckId).then((value) => {\n      setDeck(value);\n    });\n    readCard(cardId).then((value) => {\n      setFormData(value);\n    });\n  }, []);\n  const handleChange = ({ target }) => {\n    setFormData({\n      ...formData,\n      [target.name]: target.value,\n    });\n  };\n  const history = useHistory();\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    updateCard(formData).then(() => {\n      history.go(-1);\n      setFormData({ ...initialFormState });\n    });\n  };\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <a href=\"/\">Home</a>\n            </li>\n            <li className=\"breadcrumb-item active\">{deck[\"name\"]}</li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Edit Card\n            </li>\n          </ol>\n        </nav>\n        <h1>Edit Card for {deck[\"name\"]}</h1>\n      </div>\n      <div className=\"container\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"front\">\n              Front:\n              <textarea\n                className=\"form-control d-inline\"\n                id=\"front\"\n                type=\"text\"\n                name=\"front\"\n                onChange={handleChange}\n                value={formData.front}\n              />\n            </label>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"back\">\n              Back:\n              <textarea\n                className=\"form-control d-inline\"\n                id=\"back\"\n                type=\"text\"\n                name=\"back\"\n                onChange={handleChange}\n                value={formData.back}\n              />\n            </label>\n          </div>\n          <br />\n          <Link\n            type=\"button\"\n            className=\"btn btn-secondary btn-md mr-2\"\n            to={`/decks/${deckId}`}\n          >\n            Done\n          </Link>\n          <button className=\"btn btn-primary btn-md\" type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </>\n  );\n}\n\nexport default EditCard;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\nimport NotFound from \"./Layout/NotFound\";\nimport Study from \"./Layout/Study\";\nimport DeckOverview from \"./Layout/DeckOverview\";\nimport NewDeck from \"./Layout/NewDeck\";\nimport EditDeck from \"./Layout/EditDeck\";\nimport AddCard from \"./Layout/AddCard\";\nimport EditCard from \"./Layout/EditCard\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Layout />\n        </Route>\n        <Route exact path=\"/decks/new\">\n          <NewDeck />\n        </Route>\n        <Route exact path=\"/decks/:deckId/edit\">\n          <EditDeck />\n        </Route>\n        <Route exact path=\"/decks/:deckId\">\n          <DeckOverview />\n        </Route>\n        <Route exact path=\"/decks/:deckId/study\">\n          <Study />\n        </Route>\n        <Route path=\"/decks/:deckId/cards/new\">\n          <AddCard />\n        </Route>\n        <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n          <EditCard />\n        </Route>\n        <Route>\n          <NotFound />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}